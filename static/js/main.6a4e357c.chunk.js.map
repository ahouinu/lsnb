{"version":3,"sources":["DayCol.js","Board.js","LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["DayCol","day","arr","map","el","days","Board","gutter","align","idx","key","Array","from","length","Header","Layout","Content","Footer","LandingPage","className","theme","mode","defaultSelectedKeys","Item","to","style","padding","height","path","exact","component","render","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAceA,EAXA,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,oCACb,6BACE,kBAAC,IAAD,KACE,4BAAKD,GACJC,EAAIC,KAAI,SAACC,GAAD,OACP,kBAAC,IAAD,YCHFC,EAAO,CAAC,MAAO,MAAO,MAAO,MAAO,OAa3BC,EAXD,kBACZ,6BACE,kBAAC,IAAD,CAAKC,OAAO,WAAWC,MAAM,UAE1BH,EAAKF,KAAI,SAACF,EAAKQ,GACd,OAAO,kBAAC,EAAD,CAAQR,IAAKA,EAAKS,IAAKD,EAAKP,IAAKS,MAAMC,KAAK,CAAEC,OAAQ,Y,gBCP7DC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OA4BVC,EA1BK,kBAClB,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAAC,IAAD,KACE,kBAACL,EAAD,KACE,yBAAKK,UAAU,SACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACzD,kBAAC,IAAKC,KAAN,CAAWb,IAAI,KACb,kBAAC,IAAD,CAAMc,GAAG,KAAT,SAEF,kBAAC,IAAKD,KAAN,CAAWb,IAAI,KAAI,kBAAC,IAAD,CAAMc,GAAG,SAAT,SACnB,kBAAC,IAAKD,KAAN,CAAWb,IAAI,KAAI,kBAAC,IAAD,CAAMc,GAAG,UAAT,YAGvB,kBAACR,EAAD,CAASS,MAAO,CAAEC,QAAS,SAAUC,OAAQ,WAC3C,yBAAKR,UAAU,uBAEb,kBAAC,IAAD,CAAOS,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,QAAQC,OAAK,EAACE,OAAQ,kBAAM,kBAAC,IAAD,SACxC,kBAAC,IAAD,CAAOH,KAAK,SAASC,OAAK,EAACE,OAAQ,kBAAM,kBAAC,IAAD,WAG7C,kBAACd,EAAD,CAAQQ,MAAO,CAAEO,UAAW,WAA5B,6CCfSC,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCIce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a4e357c.chunk.js","sourcesContent":["import React from 'react';\nimport { Col, Empty } from 'antd';\n\nconst DayCol = ({ day, arr, ...restProps }) => (\n  <div>\n    <Col>\n      <h1>{day}</h1>\n      {arr.map((el) =>\n        <Empty />\n      )}\n    </Col>\n  </div>\n)\n\nexport default DayCol;","import React from 'react';\nimport { Row } from 'antd';\n\nimport DayCol from './DayCol';\n\nconst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];\n\nconst Board = () => (\n  <div>\n    <Row gutter='[60, 60]' align='center'>\n      {/* <DayCol day='Mon'/> */}\n      {days.map((day, idx) => {\n        return <DayCol day={day} key={idx} arr={Array.from({ length: 5 })} />\n      })}\n    </Row>\n  </div>\n)\n\nexport default Board;","import React from 'react';\nimport { Layout, Menu, Empty } from 'antd';\nimport Board from './Board';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nconst { Header, Content, Footer } = Layout;\n\nconst LandingPage = () => (\n  <Layout className=\"layout\">\n    <Router>\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n          <Menu.Item key=\"1\">\n            <Link to='/'>Home</Link>\n          </Menu.Item>\n          <Menu.Item key=\"2\"><Link to='/form'>Form</Link></Menu.Item>\n          <Menu.Item key=\"3\"><Link to='/about'>About</Link></Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px', height: '1000px' }}>\n        <div className=\"site-layout-content\">\n\n          <Route path='/' exact component={Board} />\n          <Route path='/form' exact render={() => <Empty />} />\n          <Route path='/about' exact render={() => <Empty />} />\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n  </Router>\n    </Layout>\n)\n\nexport default LandingPage;\n","import React from 'react';\nimport './App.css';\nimport LandingPage from './LandingPage';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}