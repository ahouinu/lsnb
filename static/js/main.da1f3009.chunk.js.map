{"version":3,"sources":["LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","loading","HomePage","Loadable","loader","About","FormPage","LandingPage","className","style","backgroundColor","theme","mode","defaultSelectedKeys","Item","key","to","padding","margin","minHeight","path","component","name","textAlign","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAMQA,G,OAA4BC,IAA5BD,QAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAEnBC,EAAU,kBAAM,4CAEhBC,EAAWC,IAAS,CACxBC,OAAQ,kBAAM,mEACdH,YAIII,EAAQF,IAAS,CACrBC,OAAQ,kBAAM,6DACdH,YAIIK,EAAWH,IAAS,CACxBC,OAAQ,kBAAM,mEACdH,YA+CaM,EA5CK,kBAClB,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAAC,IAAD,KACE,kBAACX,EAAD,CAAQY,MAAO,CAAEC,gBAAiB,UAChC,yBAAKF,UAAU,QAAf,sBACA,kBAAC,IAAD,CACEA,UAAU,OACVG,MAAM,QACNC,KAAK,aACLC,oBAAqB,CAAC,MAEtB,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,SAAT,SAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,YAIN,kBAACjB,EAAD,CACEU,MAAO,CAAEQ,QAAS,SAAUC,OAAQ,aAAcC,UAAW,UAE7D,yBAAKX,UAAU,uBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,QAAQC,UAAWf,IAC/B,kBAAC,IAAD,CAAOc,KAAK,SAASC,UAAWhB,IAChC,kBAAC,IAAD,CAAOe,KAAK,IAAIE,KAAK,WAAWD,UAAWnB,OAIjD,kBAACF,EAAD,CAAQS,MAAO,CAAEc,UAAW,WAC1B,uBAAGC,KAAK,0DAAR,2CAGA,0BAAMf,MAAO,CAAES,OAAQ,oBAAvB,KACA,uBAAGM,KAAK,UAAR,iBCrDOC,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da1f3009.chunk.js","sourcesContent":["import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Loadable from \"react-loadable\";\nimport \"./LandingPage.css\";\n\nconst { Header, Content, Footer } = Layout;\n\nconst loading = () => <div>Loading...</div>;\n// HomePage\nconst HomePage = Loadable({\n  loader: () => import(\"./views/HomePage/Board\"),\n  loading,\n});\n\n// About\nconst About = Loadable({\n  loader: () => import(\"./views/AboutPage/AboutPage\"),\n  loading,\n});\n\n// about\nconst FormPage = Loadable({\n  loader: () => import(\"./views/FormPage/FormPage\"),\n  loading,\n});\n\nconst LandingPage = () => (\n  <Layout className=\"layout\">\n    <Router>\n      <Header style={{ backgroundColor: \"white\" }}>\n        <div className=\"logo\">Agile Standup Tool</div>\n        <Menu\n          className=\"menu\"\n          theme=\"light\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={[\"1\"]}\n        >\n          <Menu.Item key=\"1\">\n            <Link to=\"/\">Home</Link>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Link to=\"/form\">Form</Link>\n          </Menu.Item>\n          <Menu.Item key=\"3\">\n            <Link to=\"/about\">About</Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content\n        style={{ padding: \"0 50px\", margin: \"50px 0 0 0\", minHeight: \"500px\" }}\n      >\n        <div className=\"site-layout-content\">\n          <Switch>\n            <Route path=\"/form\" component={FormPage} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/\" name=\"HomePage\" component={HomePage} />\n          </Switch>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        <a href=\"https://membership.acs.org.au/flattenthecurvehack.html\">\n          #flattenthecurvehack Hackathon ACS 2020\n        </a>\n        <span style={{ margin: \"0px 5px 0px 5px\" }}>|</span>\n        <a href=\"/about\">Team LSNB</a>\n      </Footer>\n    </Router>\n  </Layout>\n);\n\nexport default LandingPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport LandingPage from \"./LandingPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}